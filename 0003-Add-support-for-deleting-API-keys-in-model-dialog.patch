From 6d856de91faa3a9f57dd6ecdf53f21db4d42a71c Mon Sep 17 00:00:00 2001
From: theguy000 <istiakm30@gmail.com>
Date: Fri, 8 Aug 2025 07:40:19 +0600
Subject: [PATCH 3/4] Add support for deleting API keys in model dialog

- Introduce DeleteAPIKey key binding (ctrl+d/delete/del) to the model dialog
- Update key help to include delete option when appropriate
- Implement logic to clear API key from config and UI when delete is triggered
- Refresh model list to update "Configured" labels after deletion
- Only show "Configured" label for providers with non-empty API keys

This improves API key management by allowing users to easily remove saved keys.
---
 .../tui/components/dialogs/models/keys.go     |  9 ++++
 .../tui/components/dialogs/models/list.go     | 10 +++--
 .../tui/components/dialogs/models/models.go   | 44 +++++++++++++++----
 3 files changed, 51 insertions(+), 12 deletions(-)

diff --git a/internal/tui/components/dialogs/models/keys.go b/internal/tui/components/dialogs/models/keys.go
index 0e5033b7..bbe24af4 100644
--- a/internal/tui/components/dialogs/models/keys.go
+++ b/internal/tui/components/dialogs/models/keys.go
@@ -7,6 +7,7 @@ import (
 type KeyMap struct {
	Select,
	EditAPIKey,
+	DeleteAPIKey,
	Next,
	Previous,
	Tab,
@@ -26,6 +27,10 @@ func DefaultKeyMap() KeyMap {
			key.WithKeys("ctrl+enter"),
			key.WithHelp("ctrl+enter", "edit api key"),
		),
+		DeleteAPIKey: key.NewBinding(
+			key.WithKeys("ctrl+d", "delete", "del"),
+			key.WithHelp("ctrl+d/delete", "delete api key"),
+		),
		Next: key.NewBinding(
			key.WithKeys("down", "ctrl+n"),
			key.WithHelp("â†“", "next item"),
@@ -50,6 +55,7 @@ func (k KeyMap) KeyBindings() []key.Binding {
	return []key.Binding{
		k.Select,
		k.EditAPIKey,
+		k.DeleteAPIKey,
		k.Next,
		k.Previous,
		k.Tab,
@@ -72,6 +78,7 @@ func (k KeyMap) FullHelp() [][]key.Binding {
 func (k KeyMap) ShortHelp() []key.Binding {
	if k.isAPIKeyHelp && !k.isAPIKeyValid {
		return []key.Binding{
+			k.DeleteAPIKey,
			k.Close,
		}
	} else if k.isAPIKeyValid {
@@ -90,6 +97,8 @@ func (k KeyMap) ShortHelp() []key.Binding {
	}
	if !k.isAPIKeyHelp {
		help = append(help, k.EditAPIKey)
+	} else {
+		help = append(help, k.DeleteAPIKey)
	}
	return help
 }
diff --git a/internal/tui/components/dialogs/models/list.go b/internal/tui/components/dialogs/models/list.go
index 66b55d85..12e2ebca 100644
--- a/internal/tui/components/dialogs/models/list.go
+++ b/internal/tui/components/dialogs/models/list.go
@@ -162,7 +162,9 @@ func (m *ModelListComponent) SetModelType(modelType int) tea.Cmd {
				name = string(configProvider.ID)
			}
			section := list.NewItemSection(name)
-			section.SetInfo(configured)
+			if providerConfig.APIKey != "" {
+				section.SetInfo(configured)
+			}
			group := list.Group[list.CompletionItem[ModelOption]]{
				Section: section,
			}
@@ -205,8 +207,10 @@ func (m *ModelListComponent) SetModelType(modelType int) tea.Cmd {
		}

		section := list.NewItemSection(name)
-		if _, ok := cfg.Providers.Get(string(provider.ID)); ok {
-			section.SetInfo(configured)
+		if pc, ok := cfg.Providers.Get(string(provider.ID)); ok {
+			if pc.APIKey != "" {
+				section.SetInfo(configured)
+			}
		}
		group := list.Group[list.CompletionItem[ModelOption]]{
			Section: section,
diff --git a/internal/tui/components/dialogs/models/models.go b/internal/tui/components/dialogs/models/models.go
index d316350f..ada05ced 100644
--- a/internal/tui/components/dialogs/models/models.go
+++ b/internal/tui/components/dialogs/models/models.go
@@ -100,11 +100,14 @@ func (m *modelDialogCmp) Init() tea.Cmd {

 func (m *modelDialogCmp) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
	switch msg := msg.(type) {
-	case tea.WindowSizeMsg:
+case tea.WindowSizeMsg:
		m.wWidth = msg.Width
		m.wHeight = msg.Height
		m.apiKeyInput.SetWidth(m.width - 2)
		m.help.Width = m.width - 2
+		// keep help context in sync with API key mode
+		m.keyMap.isAPIKeyHelp = m.needsAPIKey
+		m.keyMap.isAPIKeyValid = m.isAPIKeyValid
		return m, m.modelList.SetSize(m.listWidth(), m.listHeight())
	case APIKeyStateChangeMsg:
		u, cmd := m.apiKeyInput.Update(msg)
@@ -121,11 +124,13 @@ func (m *modelDialogCmp) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
				} else {
					modelType = config.SelectedModelTypeSmall
				}
-				m.needsAPIKey = true
+m.needsAPIKey = true
				m.selectedModel = selectedItem
				m.selectedModelType = modelType
				m.apiKeyInput.SetProviderName(selectedItem.Provider.Name)
				m.apiKeyInput.SetTitle("API Key Configuration")
+				m.keyMap.isAPIKeyHelp = true
+				m.keyMap.isAPIKeyValid = false

				provider, ok := config.Get().Providers.Get(string(selectedItem.Provider.ID))
				if ok {
@@ -206,6 +211,23 @@ func (m *modelDialogCmp) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
				m.apiKeyInput.SetProviderName(selectedItem.Provider.Name)
				return m, nil
			}
+case key.Matches(msg, m.keyMap.DeleteAPIKey):
+			if m.needsAPIKey && m.selectedModel != nil {
+				providerID := string(m.selectedModel.Provider.ID)
+				// Clear from config and UI
+if err := config.Get().SetProviderAPIKey(providerID, ""); err != nil {
+					return m, util.ReportError(fmt.Errorf("failed to delete API key: %w", err))
+				}
+				m.apiKeyInput.Reset()
+				m.isAPIKeyValid = false
+				m.apiKeyValue = ""
+				m.keyMap.isAPIKeyHelp = true
+				m.keyMap.isAPIKeyValid = false
+				// Refresh model list so "Configured" labels update immediately
+				refresh := m.modelList.SetModelType(m.modelList.GetModelType())
+				return m, tea.Batch(util.ReportInfo("API key deleted"), refresh)
+			}
+			return m, nil
		case key.Matches(msg, m.keyMap.Tab):
			if m.needsAPIKey {
				u, cmd := m.apiKeyInput.Update(msg)
@@ -224,22 +246,26 @@ func (m *modelDialogCmp) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
				if m.isAPIKeyValid {
					return m, nil
				}
-				// Go back to model selection
+// Go back to model selection
				m.needsAPIKey = false
				m.selectedModel = nil
				m.isAPIKeyValid = false
				m.apiKeyValue = ""
				m.apiKeyInput.Reset()
				m.apiKeyInput.SetTitle("API Key")
+				m.keyMap.isAPIKeyHelp = false
+				m.keyMap.isAPIKeyValid = false
				return m, nil
			}
			return m, util.CmdHandler(dialogs.CloseDialogMsg{})
-		default:
-			if m.needsAPIKey {
-				u, cmd := m.apiKeyInput.Update(msg)
-				m.apiKeyInput = u.(*APIKeyInput)
-				return m, cmd
-			} else {
+default:
+				if m.needsAPIKey {
+					m.keyMap.isAPIKeyHelp = true
+					m.keyMap.isAPIKeyValid = m.isAPIKeyValid
+					u, cmd := m.apiKeyInput.Update(msg)
+					m.apiKeyInput = u.(*APIKeyInput)
+					return m, cmd
+				} else {
				u, cmd := m.modelList.Update(msg)
				m.modelList = u
				return m, cmd
--
2.50.1
